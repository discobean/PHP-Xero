Author: Mariusz Stankiewicz (dependent on the work of others - see below)

Description:
This is a class I made with help from David Pitman's original PHP Class located here: https://github.com/thinktree/PHP-Xero
It interacts with the xero.com private application API

I originally built this so that I can talk to the API in an OO way.

It is kind of similar to ActiveRecord, but for the Xero API.

Right now only handles a few method calls, but its all I needed at the time:
 * Create/Find a Contact
 * Find an Account
 * Create a new Invoice
 * Download Invoice as PDF

License (applies to all classes):
The MIT License

Copyright (c) 2007 Andy Smith (Oauth* classes)
Copyright (c) 2010 David Pitman (Integration with Curl and Oauth)
Copyright (c) 2012 Mariusz Stankiewicz (Xero* classes)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---

Now that's all over and done with, here are some EXAMPLES:

// Here is the setup you need to get it running
// For more information on getting a Keys and Certs visit https://api.xero.com/Application
require_once('Xero.class.php');
define('XERO_CONSUMER_KEY','VAN_MY_CONSUMER_KEYRKLMJCRBTL9');
define('XERO_CONSUMER_SECRET','RXF_MY_CONSUMER_SECRET_KEYP2C6');
define('XERO_CERTIFICATE','public_certificate.cer');
define('XERO_PRIVATE_KEY','private.key');

--- Example 1 - Get all invoices

// Get all invoices
$invoices = new XeroInvoices();
$invoices->get();

// Iterate through the invoices printing out the invoice number
foreach($invoices as $invoice)
	echo $invoice->InvoiceNumber . " <br />\n";

--- Example 2 - Get only certain invoices using a filter

// Lots of example filters are defined here: http://blog.xero.com/developer/api-overview/http-get/
// But here are some to get you thinking:

// Get only invoices for one particular contact name
$contactName = 'API Test Contact';
$invoices = new XeroInvoices();
$invoices->get('Contact.Name == ?', $contactName);
// NOTE: You can bind as many variables to ? above, like so:
//   $invoices->get('Contact.Name == ? AND InvoiceNumber == ?', $contactName, $invoiceNumber);
// NOTE: Above its == not = (as per the API)
// NOTE: You don't necessarily need to bind variables, it is just cleaner

// Iterate through the invoices printing out the invoice number
foreach($invoices as $invoice)
	echo $invoice->InvoiceNumber . " <br />\n";

--- Example 3 - Creating a new Contact

// Xero lets you create a new customer by posting
// If the contact already exists, then it will fetch that contact instead
// Details of this call are in: http://blog.xero.com/developer/api/contacts/
$contact = new XeroContact();
$contact->Name = "Joe Smithton";

// now add the contact to a collection, and post it (All API calls are done through collections, except PDF)
// You can add multiple contacts if you wish :)
$contacts = new XeroContacts();
$contacts->add($contact);

// POST the message to Xero (These calls are all defined in the API)
// This method returns a new XeroContacts collection that is populated from the API
$newContacts = $contacts->post();

// Because we only posted 1 contact, 1 contact is returned in the collection
// use first() to grab that first contact (you can also use seek(0))
$newContact = $newContacts->first();

echo $newContact->ContactID . "\n";
// All other variables from Contact are available, except Addresses and Phones

---- Example 4 - Creating a new Invoice

// In order to create a new invoice you need a few things
// * Contact
// * Account
// * Some line items for the invoice
$contact = new XeroContact();
$contact->Name = 'Joe Smithton'; // you can also get() a contact and use that

// All the invoice fields are available in the 
// API Docs: http://blog.xero.com/developer/api/invoices/
$invoice = new XeroInvoice();
$invoice->Type = 'ACCREC';
$invoice->Contact = $contact; // Set the contact from earlier
$invoice->Date = '2011-09-20';
$invoice->DueDate = '2011-09-20';
$invoice->Status = 'AUTHORISED';
$invoice->LineAmountTypes = 'Inclusive';

// now create the line items, you can add as many as you like
// in this example we only add one
$line = new XeroInvoiceLineItem();
$line->Description = 'Buy marz a burger';
$line->Tax = 'OUTPUT';
$line->Quantity = 1;
$line->UnitAmount = 100;
$line->AccountCode = 200; // Make sure to use the right account code, see API!

$invoice->add($line);

// now wrap the invoice up in the collection and send it off
// (you can add multiple invoices here too, hooray)
$invoices = new XeroInvoices();
$invoices->add($invoice);

$newInvoices = $invoices->post();

// get the first invoice, because only posted one
$newInvoice = $newInvoices->first();

echo $newInvoice->InvoiceNumber . "\n";

---- Example 5 - Paying an Invoice

// select the invoice that you want
// you can use get() or even use a previously selected invoice object
$invoice = new XeroInvoice();
$invoice->InvoiceNumber = 'ORC1046';

// create an account object, which has the account number
// this could have also come from a get()
$account = new XeroAccount();
$account->Code = '099';

// make the payment object, and populate it
$payment = new XeroPayment();
$payment->Invoice = $invoice;
$payment->Account = $account;
$payment->Date = '2012-04-03';
$payment->Amount = 5;
$payment->Reference = "Paid for Marz's Burgers";

// add the payment to the collection (you can make multiples again)
$payments = new XeroPayments();
$payments->add($payment);
// now PUT the payments, remember the API uses PUT instead of POST
$newPayments = $payments->put();

// The result of your payments will appear in $newPayments as a XeroPayments Collection
// Again, use first() because there is only 1 payment
$newPayment = $newPayments->first();

echo $newPayment->PaymentID . "\n";

---- Example 6 - Downloading an invoice as PDF

// This is the fun part!  Creating a PDF invoice
$invoice = new XeroInvoice();
$invoice->InvoiceNumber = 'ORC1046';
$pdfContents = $invoice->getPDF();

// save the contents to a file, or do whatever you want with it
file_put_contents('invoicemarz.pdf', $pdfContents);

// BTW you can skip a step and just run $invoice->getPDF('ORC1046');


---- Exceptions - XeroApiException

When performing some queries you might run into some exceptions
but specifically I will talk about XeroApiException

Xero API will throw an Exception in XML, we catch that and turn it into a PHP Exception
called XeroApiException

-

// So the example:
$invoices = new XeroInvoices();
$invoices->get("Something == 'Wrong!'");

-

// And the exception:
PHP Fatal error:  Uncaught exception 'XeroApiException' with message 'QueryParseException: No property or field 'Something' exists in type 'Invoice'' in /Users/mariusz/Xero.class.php:111
Stack trace:
#0 /Users/mariusz/marzxero.php(11): Xero->get('Something == 'W...')
#1 {main}
  thrown in /Users/mariusz/Xero.class.php on line 111

-

In this instance, QueryParseException is the type of Exception raised by the Xero API, 
and the description after it gives you some idea of what is wrong.

Sometimes you might want more info, if you catch the Exception, you can then print 
$e->getXML(); to give you the Raw XML output of the Exception

----

Hope it was helpful,

Have fun!

